/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p1s4;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JToggleButton;


public class PanelBotones extends javax.swing.JPanel{
    private Controlador controlador;
    
    private boolean modoManual = true;
    private boolean tieneCombustible = true;
    private boolean puedeReiniciar = false;
    
    private EstadoMotor estadoMotor = EstadoMotor.APAGADO;
    private EstadoSCACV estadoSCACV = EstadoSCACV.APAGADO;
    
    /**
     * Creates new form PanelBotones
     */
    public PanelBotones() {
        initComponents();
        //menuSCACV = new JComboBox(EstadoSCACV.values());
        //menuSCACV.setModel(new DefaultComboBoxModel<>(EstadoSCACV.values()));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSuperior = new javax.swing.JPanel();
        etiquetaPrincipal = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        aviso = new javax.swing.JLabel();
        etiquetaVelocidadCrucero = new javax.swing.JLabel();
        panelInferior = new javax.swing.JPanel();
        panelAux1 = new javax.swing.JPanel();
        botonEncender = new javax.swing.JToggleButton();
        botonAcelerar = new javax.swing.JToggleButton();
        botonFrenar = new javax.swing.JToggleButton();
        panelAux2 = new javax.swing.JPanel();
        botonApagadoAuto = new javax.swing.JToggleButton();
        botonMantenerAuto = new javax.swing.JToggleButton();
        botonAcelerarAuto = new javax.swing.JToggleButton();
        botonReiniciarAuto = new javax.swing.JToggleButton();
        panelAux3 = new javax.swing.JPanel();
        botonCambiarAceite = new javax.swing.JButton();
        botonCambiarPastillasFreno = new javax.swing.JButton();
        botonRevisionGeneral = new javax.swing.JButton();
        panelAux4 = new javax.swing.JPanel();
        botonAniadirCombustible = new javax.swing.JButton();
        combustible = new javax.swing.JTextField();

        setLayout(new java.awt.GridLayout(2, 1));

        panelSuperior.setLayout(new java.awt.BorderLayout());

        etiquetaPrincipal.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        etiquetaPrincipal.setForeground(java.awt.Color.red);
        etiquetaPrincipal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaPrincipal.setText("APAGADO");
        etiquetaPrincipal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelSuperior.add(etiquetaPrincipal, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(2, 1));

        aviso.setBackground(new java.awt.Color(204, 204, 204));
        aviso.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        aviso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(aviso);

        etiquetaVelocidadCrucero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(etiquetaVelocidadCrucero);

        panelSuperior.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        add(panelSuperior);

        panelInferior.setLayout(new java.awt.GridLayout(2, 2));

        botonEncender.setForeground(java.awt.Color.green);
        botonEncender.setText("ENCENDER");
        botonEncender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEncenderActionPerformed(evt);
            }
        });
        panelAux1.add(botonEncender);

        botonAcelerar.setText("ACELERAR");
        botonAcelerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAcelerarActionPerformed(evt);
            }
        });
        panelAux1.add(botonAcelerar);

        botonFrenar.setText("FRENAR");
        botonFrenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFrenarActionPerformed(evt);
            }
        });
        panelAux1.add(botonFrenar);

        panelInferior.add(panelAux1);

        panelAux2.setLayout(new java.awt.GridLayout(2, 2));

        botonApagadoAuto.setSelected(true);
        botonApagadoAuto.setText("APAGADO");
        botonApagadoAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonApagadoAutoActionPerformed(evt);
            }
        });
        panelAux2.add(botonApagadoAuto);

        botonMantenerAuto.setText("MANTENER");
        botonMantenerAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMantenerAutoActionPerformed(evt);
            }
        });
        panelAux2.add(botonMantenerAuto);

        botonAcelerarAuto.setText("ACELERAR");
        botonAcelerarAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAcelerarAutoActionPerformed(evt);
            }
        });
        panelAux2.add(botonAcelerarAuto);

        botonReiniciarAuto.setText("REINICIAR");
        botonReiniciarAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonReiniciarAutoActionPerformed(evt);
            }
        });
        panelAux2.add(botonReiniciarAuto);

        panelInferior.add(panelAux2);

        botonCambiarAceite.setText("CAMBIAR ACEITE");
        botonCambiarAceite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCambiarAceiteActionPerformed(evt);
            }
        });
        panelAux3.add(botonCambiarAceite);

        botonCambiarPastillasFreno.setText("CAMBIAR PASTILLASFRENO");
        botonCambiarPastillasFreno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCambiarPastillasFrenoActionPerformed(evt);
            }
        });
        panelAux3.add(botonCambiarPastillasFreno);

        botonRevisionGeneral.setText("REVISION GENERAL");
        botonRevisionGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRevisionGeneralActionPerformed(evt);
            }
        });
        panelAux3.add(botonRevisionGeneral);

        panelInferior.add(panelAux3);

        botonAniadirCombustible.setText("AÑADIR COMBUSTIBLE");
        botonAniadirCombustible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAniadirCombustibleActionPerformed(evt);
            }
        });
        panelAux4.add(botonAniadirCombustible);

        combustible.setPreferredSize(new java.awt.Dimension(60, 21));
        panelAux4.add(combustible);

        panelInferior.add(panelAux4);

        add(panelInferior);
    }// </editor-fold>//GEN-END:initComponents

    private void botonAcelerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAcelerarActionPerformed
        // Se puede pulsar si estamos en modo manual y está o encendido o acelerando
        // (este último para deseleccionar)
        
        if (((estadoMotor==EstadoMotor.ENCENDIDO || estadoMotor==EstadoMotor.ACELERANDO) 
            && modoManual) || (estadoSCACV==EstadoSCACV.REINICIAR && !modoManual))
                actualizarBotonAcelerar();
        else
            botonAcelerar.setSelected(false);
        
        // Avisamos al controlador para que cambie el estado del objetivo
        controlador.cambioEstadoMotor(estadoMotor);
    }//GEN-LAST:event_botonAcelerarActionPerformed

    private void botonEncenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEncenderActionPerformed
        // Sepulsa si está en modo encendido (para apagar) o en modo apagado 
        // (para encender)
        
        if((estadoMotor == EstadoMotor.ENCENDIDO || estadoMotor == EstadoMotor.APAGADO) && modoManual)
            actualizarBotonEncender();
        else
            botonEncender.setSelected(!botonEncender.isSelected());
        
        // Avisamos al controlador para que cambie el estado del objetivo
        controlador.cambioEstadoMotor(estadoMotor);
    }//GEN-LAST:event_botonEncenderActionPerformed

    private void botonFrenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFrenarActionPerformed
        // Dependiendo de los casos en los que se pueda actualizar, actuamos
        // según corresponda
        if (((estadoMotor==EstadoMotor.ENCENDIDO || estadoMotor==EstadoMotor.FRENANDO) && modoManual) ||
            ((estadoSCACV==EstadoSCACV.REINICIAR || estadoSCACV==EstadoSCACV.ACELERAR
             || estadoSCACV==EstadoSCACV.MANTENER) &&!modoManual)){
            
            botonReiniciarAuto.setSelected(false);
            botonAcelerarAuto.setSelected(false);
            botonMantenerAuto.setSelected(false);
            botonApagadoAuto.setSelected(true);

            if (estadoSCACV==EstadoSCACV.ACELERAR || estadoSCACV==EstadoSCACV.MANTENER){
                actualizarBotonApagarAuto();
                
                // Avisamos al controlador para que cambie el estado del objetivo
                controlador.cambioEstadoSCACV(estadoSCACV);
            }
            actualizarBotonFrenar();
        }
        else
            botonFrenar.setSelected(false);
        
        // Avisamos al controlador para que cambie el estado del objetivo
        controlador.cambioEstadoMotor(estadoMotor);
    }//GEN-LAST:event_botonFrenarActionPerformed

    private void botonCambiarAceiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCambiarAceiteActionPerformed
        if (estadoMotor == EstadoMotor.APAGADO)
            controlador.cambiarAceite();
    }//GEN-LAST:event_botonCambiarAceiteActionPerformed

    private void botonCambiarPastillasFrenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCambiarPastillasFrenoActionPerformed
        if (estadoMotor == EstadoMotor.APAGADO)
            controlador.cambiarPastillasFrenos();
    }//GEN-LAST:event_botonCambiarPastillasFrenoActionPerformed

    private void botonRevisionGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRevisionGeneralActionPerformed
        if (estadoMotor == EstadoMotor.APAGADO)
            controlador.revisionGeneral();
    }//GEN-LAST:event_botonRevisionGeneralActionPerformed

    private void botonAniadirCombustibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAniadirCombustibleActionPerformed
        if (estadoMotor == EstadoMotor.APAGADO || !tieneCombustible)
            controlador.aniadirCombustible(combustible.getText());
    }//GEN-LAST:event_botonAniadirCombustibleActionPerformed

    private void botonApagadoAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonApagadoAutoActionPerformed
        if (estadoSCACV == EstadoSCACV.ACELERAR || estadoSCACV == EstadoSCACV.MANTENER){
            botonAcelerarAuto.setSelected(false);
            botonMantenerAuto.setSelected(false);
            
            actualizarBotonApagarAuto();
        }else
            botonApagadoAuto.setSelected(!botonApagadoAuto.isSelected());
        
        // Avisamos al controlador para que cambie el estado del objetivo
        controlador.cambioEstadoSCACV(estadoSCACV);
    }//GEN-LAST:event_botonApagadoAutoActionPerformed

    private void botonMantenerAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMantenerAutoActionPerformed
        if (estadoSCACV == EstadoSCACV.ACELERAR){
            botonAcelerarAuto.setSelected(false);
            actualizarBotonMantenerAuto();
        }else
            botonMantenerAuto.setSelected(!botonMantenerAuto.isSelected());
        
        // Avisamos al controlador para que cambie el estado del objetivo
        controlador.cambioEstadoSCACV(estadoSCACV);
    }//GEN-LAST:event_botonMantenerAutoActionPerformed

    private void botonAcelerarAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAcelerarAutoActionPerformed
        if (estadoMotor == EstadoMotor.ACELERANDO){
            botonAcelerar.setSelected(false);
            botonApagadoAuto.setSelected(false);
            
            actualizarBotonAcelerar();
            actualizarBotonAcelerarAuto();
        }else
            botonAcelerarAuto.setSelected(!botonAcelerarAuto.isSelected());
        
        controlador.cambioEstadoSCACV(estadoSCACV);
    }//GEN-LAST:event_botonAcelerarAutoActionPerformed

    private void botonReiniciarAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonReiniciarAutoActionPerformed
        if (estadoMotor == EstadoMotor.ENCENDIDO && modoManual && puedeReiniciar){
            botonApagadoAuto.setSelected(false);
            actualizarBotonReiniciarAuto();
        }else
            botonReiniciarAuto.setSelected(!botonReiniciarAuto.isSelected());
        
        controlador.cambioEstadoSCACV(estadoSCACV);
    }//GEN-LAST:event_botonReiniciarAutoActionPerformed

    
    // *************************************************************************
    // MÉTODOS CONSULTORES:
    // *************************************************************************
    
    public JLabel getEtiquetaVelocidadCrucero() {
        return etiquetaVelocidadCrucero;
    }
    public JLabel getEtiquetaPrincipal() {
        return etiquetaPrincipal;
    }
    
    public EstadoMotor getEstadoMotor() {
        return estadoMotor;
    }

    public boolean puedeReiniciar(){
        return puedeReiniciar;
    }

    public JToggleButton getBotonEncender() {
        return botonEncender;
    }
    public JToggleButton getBotonMantenerAuto() {
        return botonMantenerAuto;
    }
    public JToggleButton getBotonApagadoAuto() {
        return botonApagadoAuto;
    }
    public JToggleButton getBotonReiniciarAuto() {
        return botonReiniciarAuto;
    }
    
    
    // *************************************************************************
    // MÉTODOS MODIFICADORES:
    // *************************************************************************
    
    
    public void setControlador(Controlador c){
        controlador = c;
    }
    
    public void setEtiquetaVelocidadCrucero(JLabel etiquetaVelocidadCrucero) {
        this.etiquetaVelocidadCrucero = etiquetaVelocidadCrucero;
    }
    public void setMensajeAviso(String s){
        aviso.setText(s);
    }

    public void setTieneCombustible(boolean tieneCombustible) {
        this.tieneCombustible = tieneCombustible;
    }
    
    public void setEstadoMotor(EstadoMotor estadoMotor) {
        this.estadoMotor = estadoMotor;
    }
    
    
    
    // *************************************************************************
    // MÉTODOS AUXILIARES:
    // *************************************************************************
    
    
    // Actualiza etiqueta y fondo del boton de encendido
    public void actualizarBotonEncender(){
        if (botonEncender.isSelected()){
            botonEncender.setForeground(Color.red);
            botonEncender.setText("APAGAR");
            etiquetaPrincipal.setText("ENCENDIDO");
            estadoMotor = EstadoMotor.ENCENDIDO;
            modoManual=true;
        }else{
            botonEncender.setForeground(Color.green);
            botonEncender.setText("ENCENDER");
            etiquetaPrincipal.setText("APAGADO");
            estadoMotor = EstadoMotor.APAGADO;
            modoManual=true;
            puedeReiniciar=false;
        }
    }
    
        // Actualiza etiqueta y fondo del boton de frenado
    public void actualizarBotonFrenar() {
        if (botonFrenar.isSelected()){
            botonFrenar.setForeground(Color.red);
            botonFrenar.setText("Soltar freno");
            etiquetaPrincipal.setText("FRENANDO");
            estadoMotor = EstadoMotor.FRENANDO;
            modoManual=true;
        }else{
            botonFrenar.setForeground(Color.black);
            botonFrenar.setText("FRENAR");
            etiquetaPrincipal.setText("ENCENDIDO");
            estadoMotor = EstadoMotor.ENCENDIDO;
        }
    }
    
    // Actualiza etiqueta y fondo del boton de aceleración
    public void actualizarBotonAcelerar() {
        if (botonAcelerar.isSelected()){
            botonAcelerar.setForeground(Color.red);
            botonAcelerar.setText("Soltar acelerador");
            etiquetaPrincipal.setText("ACELERANDO");
            estadoMotor = EstadoMotor.ACELERANDO;
            modoManual = true;
        }else{
            botonAcelerar.setForeground(Color.black);
            botonAcelerar.setText("ACELERAR");
            etiquetaPrincipal.setText("ENCENDIDO");
            estadoMotor = EstadoMotor.ENCENDIDO;
        }
    }
    
    // Actualiza el boton de aceleración automática
    public void actualizarBotonAcelerarAuto() {
        etiquetaPrincipal.setText("ACELERANDO AUTOMATICAMENTE");
        estadoSCACV = EstadoSCACV.ACELERAR;
        estadoMotor = EstadoMotor.ACELERANDO;
        modoManual=false;
    }
    
    // Actualiza el boton de mantenimiento automático
    public void actualizarBotonMantenerAuto() {
        etiquetaPrincipal.setText("MANTENIENDO VELOCIDAD DE CRUCERO");
        estadoSCACV = EstadoSCACV.MANTENER;
        estadoMotor = EstadoMotor.ENCENDIDO;
        puedeReiniciar=true;
    }
    
    // Actualiza el boton de reinicio automático
    public void actualizarBotonReiniciarAuto() {
        etiquetaPrincipal.setText("REINICIO - VOLVEMOS A VELOCIDAD DE CRUCERO");
        estadoSCACV = EstadoSCACV.REINICIAR;
        modoManual=false;
    }
    
    // Actualiza el boton de apagado automático
    public void actualizarBotonApagarAuto() {
        etiquetaPrincipal.setText("ENCENDIDO");
        estadoSCACV = EstadoSCACV.APAGADO;
        modoManual=true;
    }
    
    // Métodos para activar/desactivar mensaje de aviso:
    public void activarAvisoVelocidad(){
        aviso.setText("¡ATENCIÓN!  MODERE SU VELOCIDAD");
    }
    public void desactivarAvisoVelocidad(){
        aviso.setText("");
    }
    
    // Desactiva los botones seleccionados
    public void desactivarBotones(){
        botonEncender.setSelected(false);
        botonFrenar.setSelected(false);
        botonAcelerar.setSelected(false);
        botonAcelerarAuto.setSelected(false);
        botonMantenerAuto.setSelected(false);
        botonReiniciarAuto.setSelected(false);
        botonApagadoAuto.setSelected(false);
        actualizarBotonAcelerar();
        actualizarBotonFrenar();
        actualizarBotonEncender();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aviso;
    private javax.swing.JToggleButton botonAcelerar;
    private javax.swing.JToggleButton botonAcelerarAuto;
    private javax.swing.JButton botonAniadirCombustible;
    private javax.swing.JToggleButton botonApagadoAuto;
    private javax.swing.JButton botonCambiarAceite;
    private javax.swing.JButton botonCambiarPastillasFreno;
    private javax.swing.JToggleButton botonEncender;
    private javax.swing.JToggleButton botonFrenar;
    private javax.swing.JToggleButton botonMantenerAuto;
    private javax.swing.JToggleButton botonReiniciarAuto;
    private javax.swing.JButton botonRevisionGeneral;
    private javax.swing.JTextField combustible;
    private javax.swing.JLabel etiquetaPrincipal;
    private javax.swing.JLabel etiquetaVelocidadCrucero;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelAux1;
    private javax.swing.JPanel panelAux2;
    private javax.swing.JPanel panelAux3;
    private javax.swing.JPanel panelAux4;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelSuperior;
    // End of variables declaration//GEN-END:variables
}
